{
    "projects":[
        {
            "name": "Tune Tailor",
            "subdomain": "tuneTailor",
            "skills": ["Software", "React.js", "Git", "Node.js", "Express.js", "MongoDB", "Mongoose", "Tailwind", "API", "React Router", "Session Management", "Full Stack"],
            "subtitle": "A Desktop-Focused Application to Simplify Liked Songs Modifications for Spotify User's",
            "collaborators": [],
            "description": [
                "The motivation behind Tune Tailor was driven by a strong desire to clean up my Spotify liked songs. My love for music combined with years of listening resulted in my Spotify liked songs accumulating over 10,000 tracks. Wanting to condense my liked songs to more accurately reflect my current music taste and with no simple way to create mass modifications via Spotify, Tune Tailor began development.",
                "The technology which drives the project is as follows: ", 
                "Frontend: React.js, React Router, Tailwind",
                "Backend: Express.js, Node.js",
                "Database: Mongoose, MongoDB",
                "The application heavily interacts with the Spotify API which provides an interface to request user profile information, liked songs data, playlist data, and top track data. Notably, Tune Tailor utilizes Spotify's authorization flow to register users with the application and leverages Spotify user's playlist and top track data as the primary avenues for modifications to their liked songs.",
                "My application improves upon the capabilities of the Spotify application by providing a UI which better enables user's to make large modifications to their liked songs efficiently. For instance, for the liked songs and top track pages, each track is clickable and many tracks can be selected simultaneously allowing the user to add or remove each selected track with a simple button click. Additionally, the user is also presented a button allowing them to remove all tracks from their liked songs immediately."
            ],
            "abstract": "A solo software project which strives to provide a cleaner interface for making modification to Spotify Liked Songs. The project utilizes Tailwind, React Router and the MERN stack alongside the Spotify API as a means of achieving this functionality.", 
            "images": ["../img/projects/tuneTailor/authorize.png", "../img/projects/tuneTailor/selectedTracks.png", "../img/projects/tuneTailor/signIn.png", "../img/projects/tuneTailor/topTracks.png"],
            "icons":["../icons/React.png", "../icons/Node.js.png", "../icons/Express.png", "../icons/Tailwind.png", "../icons/Mongoose.js.png", "../icons/MongoDB.png", "../icons/Figma.png", "../icons/HTML5.png", "../icons/GitHub.png"],
            "completed": false
        },
        {
            "name": "Polymorphia",
            "subdomain": "polymorphia",
            "skills": ["Software", "Java", "Object-Oriented Design", "Object-Oriented Programming", "Test Driven Development", "Design Patterns", "Behavior Driven Development", "Git", "Gradle"],
            "subtitle": "An Object-Oriented Interactive Game Developed in Java via TDD",
            "collaborators": [],
            "description": [
                "Polymorphia is an object-oriented interactive game developed throughout the Object-Oriented Analysis and Design course at the University of Colorado - Boulder. At its core, Polymorphia is a Maze game. The maze is composed of a varying number of rooms, each of which can contain a varying number of Adventurers, Creatures, Armor, and Food.",
                "Development of Polymorphia was centered around the idea of Test Driven Development. The result of the software development methodology is an extensive test suite ensuring the functionality of singular methods, complex objects, and the game as a whole. Although utilized at a much smaller scale, Polymorphia employed Behavioral Driven Development via Cucumber to generate tests with simplified language to complement the JUnit test suite.",
                "As extensions to the game occurred, the complexity of the game grew and the result is the use of several object oriented design patterns as a means of simplifying the codebase. A few (but not all) notable desing patterns used are as follows:",
                "Factory - The Simple Factory Pattern was utilized to separate object creation from their use. The pattern was implemented to assist with character creation (characterFactory), artifact creation (artifactFactory), and command creation (commandFactory).",
                "Builder - The Builder pattern was utilized to assist with the creation of the Maze object. The builder pattern in this context vastly improved the flexibility of maze creation by providing simple methods to add to or edit the object's configuration.",
                "Strategy - The Strategy pattern was utilized to inject strategic behavior to characters in the game. Prior to employing the pattern, the game consisted of many character subclass (e.g. Knight) which only differed by the action behavior. The pattern became the means of replacing many of these subclasses."
            ],
            "abstract": "An object-oriented game built in Java. The game features a maze consisting of a varying number of rooms, adventurers, creatures, and items. Development of the game was driven through testing via JUnit and expansions to the game provided opportunities to refactor and implement object-oriented design patterns to simplify complexity.",
            "images": ["../img/projects/polymorphia/apiGame.png", "../img/projects/polymorphia/apiGameMiddleTurn.png", "../img/projects/polymorphia/defaultServer.png", "../img/projects/polymorphia/mazeObserver.png", "../img/projects/polymorphia/UML.png"],
            "icons": ["../icons/Java.png", "../icons/JUnit.png", "../icons/Gradle.png", "../icons/Spring.png", "../icons/Cucumber.png", "../icons/GitHub.png"],
            "completed": false
        },
        {
            "name": "Portland Indigenous Marketplace Project",
            "subdomain": "pim",
            "skills": ["Software", "React.js", "Tailwind.js", "Axios", "Git", "Team", "Docker"],
            "subtitle": "A Mobile Focused Application to Improve Vendor and Event Management for Portland Indigenous Marketplace",
            "collaborators": ["Nick Henley", "Harley Ewert", "Jeremy Varghese", "Justin Goh", "Eric Fithian"],
            "description": [
                "Portland Indigenous Marketplace is a non-profit which, amongst other functions, hosts events catered specifically for indigenous and black vendors, allowing them to showcase and sell hand-crafted products. However, the non-profit lacked a consolidated platform to manage their vendors and events.",
                "Blueprint Boulder, a student organization focused on delivering software solutions to non-profits, partnered with Portland Indigenous Marketplace to create a solution to their vendor and event management problem. As a member of Blueprint Boulder, I had the opportunity to join the team to deliver the mobile-focused solution.",
                "The technology used on the team is as follows:",
                "Frontend: React.js, React Router, Tailwind", 
                "Backend: Express.js, Node.js",
                "Database: PostgreSQL",
                "My role on the team primarily focused on frontend development where I helped to develop reusable React components. Namely, I helped to create modal components to allow the administrator to add violations to a vendor and add events. Outside of React, the project improved my understanding of containerization via Docker and version control via GitHub."
            ],
            "abstract": "The Portland Indigenous Marketplace Project is a mobile-focused application developed using React.js, React Router, Express.js, Node.js, and PostgreSQL. Through these technologies, we sought to deliver a consolidated platform to the executives of the Portland Indigenous Marketplace non profit to improve their ability to manage vendors and events. The project is one amongst several projects created through the Blueprint Boulder organization.",
            "images": ["../img/projects/pim/editEvent.png", "../img/projects/pim/event.png"],
            "icons": ["../icons/React.png", "../icons/Tailwind.png", "../icons/GitHub.png", "../icons/Docker.png"],
            "completed": true
        },
        {
            "name": "Palette5",
            "subdomain": "palette",
            "skills": ["Software", "HTML", "Bootstrap", "Handlebars.js", "Axios", "Docker", "Git", "Team", "Postgres", "Node.js", "Express.js", "Agile", "API", "Full Stack"],
            "subtitle": "An Art-Focused Software Application",
            "collaborators": [],
            "description": [
                "Palette5 is an art-focused software application developed as the final project for University of Colorado - Boulder's Software Development Methods and Tools course. The project employed the agile software development methodology to decompose the project into smaller user stories which could be fulfilled across weekly sprints.",
                "The tools and technologies employed are as follows:",
                "Frontend: Handlebars.js, Bootstrap",
                "Backend: Express.js, Node.js",
                "Database: PostgreSQL",
                "An important aspect of the development of Palette5 was the emphasis on programming vertically which allowed each team member to develop a feature end to end, gaining experience across the entire stack. Within the application, I contributed to the development of the discover, artworks, and individual artwork pages.", 
                "The discovery page consolidates information about art events, artworks, user uploaded artworks, and artists. Our backend controllers interacted with our database and external APIs, namely Ticketmaster and the Art Institute of Chicago, to return data that could be dynamically rendered using Handlebars.js. A similar process is followed for creation of the artworks page. ",
                "The individual artwork page provides a more detailed view on an artwork presented in the discover or artworks page. Here the user is offered the ability to make a comment on an artwork and add an artwork to their collection which can then be viewed in their profile."
            ],  
            "abstract": "A group software project which sought to immerse themselves in the art world through discovery, events, and artist related pages. The application utilized Bootstrap, Handlebars.js, Express.js, Node.js, PostgreSQL to deliver dynamically rendered content, handle external API calls, and execute database operations.",
            "images": ["../img/projects/palette/collectionProfile.png", "../img/projects/palette/discoverP1.png", "../img/projects/palette/oneArtworkAdded.png", "../img/projects/palette/relatedArtComments.png"],
            "icons": ["../icons/GitHub.png", "../icons/Handlebars.png", "../icons/JavaScript.png", "../icons/Bootstrap.png", "../icons/Node.js.png", "../icons/PostgresSQL.png", "../icons/Express.png", "../icons/Docker.png", "../icons/Figma.png", "../icons/HTML5.png"],
            "completed": true
        },
        {
            "name": "Cook County Data Science Project",
            "subdomain": "cookCounty",
            "skills": ["Python", "NumPy", "Scikit-learn", "Pandas", "Data Exploration", "Data Analysis", "Data Cleaning"],
            "subtitle": "Investigating Cook County Housing Data to Form Predictive Models",
            "collaborators": [],
            "description": [
                "As the final project for Introduction to Data Science with Probability and Statistics at the University of Colorado - Boulder, the Cook County Data Science Project emphasized a mix of exploratory data analysis, data cleaning, and the creation of predictive models. Exploration of the data was motivated by a history of racial discrimination in housing policy and property taxation wherein the property value assessment process tended to overvalue the homes of African Americans and Latino homeowners while underassessing the homes of white individuals.", 
                "The dataset provided contained over 500,000 housing records from Cook County, Illinois. The dataset contained 61 features in total with an additional feature Sale Price to predict. Prior to modeling, it was imperative to clean the training data to ensure the data was accurate, complete and consistent. For instance, early EDA revealed inconsistencies and outliers within the Sale Price column such as thousands of homes listed with a sale price of $1 resulting in filtering of the data.",
                "The process for building the models began with developing methods to select key features from inputted datasets. With scikit-learn, these features were utilized to fit linear regression models. The accuracy of a model was evaluated with the Root Mean Squared Error (RMSE) first on the processed training and validation sets as well as on a 5-fold cross validation for the model. The final step of the process centered around visualization, namely bar charts to compare RMSE and residual scatter plots to evaluate model predictions of Log(Sale Price) versus true Log(Sale Price).",
                "The final model with an RMSE of around 168,000 utilized the Log Building Square Feet, One Hot Encoded Roof Material, Log Land Square Feet, One Hot Encoded Town Codes, and One Hot Encoded Property Class to predict the Sale Price of homes."
            ],
            "abstract": "With a history of racial discrimination in housing policy and property taxation, the project sought to explore over 500,000 housing records in Cook County, Illinois. The exploration of the dataset culminated in the creation of several linear regression models to more accurately predict home prices within the county.",
            "images": ["../img/projects/cookCounty/linearRegression.png", "../img/projects/cookCounty/model3.png", "../img/projects/cookCounty/model3Visual.png", "../img/projects/cookCounty/dataFeatures.png", "../img/projects/cookCounty/finalModel.png"],
            "icons": ["../icons/Python.png", "../icons/NumPy.png", "../icons/scikit-learn.png", "../icons/Pandas.png"],
            "completed": true
        },
        {
            "name": "Goudy Type Specimen",
            "subdomain": "typeSpecimen",
            "skills": ["Design", "Adobe Illustrator", "Type Design", "Creativity"],
            "subtitle": "An Exhibition of the Typeface Goudy Old Style",
            "collaborators": [],
            "description": [
                "A type specimen is a design which strives to showcase a typeface in a variety of ways. Namely, it is important to display the typeface at a variety of sizes, with a variety of font styles, and in a variety of design contexts.",
                "Using Adobe Illustrator as my design tool, I sought to explore the intricacies of Frederic W. Goudy's old-style, serif typeface Goudy Old Style. Qualities of the typeface which stood out to me include the diamond-like tittle (dot of the i), the double-story g and its ear, as well as the rounded, open bowl and distinctive tail of the Q.",
                "The diamond-like tittle of the i became a key design motif. Utilizing the tittle, I created patterns in the upper-left and bottom-right corners to add to the aesthetic of the type specimen. Additionally, the tittle served as an enclosure for showcasing particular characters within the typeface.",
                "The images provided represent iterations on the development of the type specimen. The first notable iteration is the type specimen with the white background which has an accompanying version with a lighter brown background. The final iteration maintains this lighter brown background, yet alters the use of the tittle, improves spacing, and more greatly emphasizes the name of the typeface and additional characters of the typeface."
            ],
            "abstract": "Designed using Adobe Illustrator, the Goudy Type Specimen seeks to provide an aesthetically pleasing presentation of the typeface Goudy Old Style designed by Frederic W. Goudy. The type specimen displays the core of the typeface, exhbiting all characters A-Z and 0-9 alongside several notable characters outside this grouping.",
            "images": ["../img/projects/typeSpecimen/finalGoudy.jpg", "../img/projects/typeSpecimen/firstGoudy.jpg", "../img/projects/typeSpecimen/middleGoudy.jpg"],
            "icons":["../icons/adobeIllustrator.png"],
            "completed": true
        },
        {
            "name": "Typographic Calendar",
            "subdomain": "typeCalendar",
            "skills": ["Design", "Team", "Adobe Illustrator", "Type Design", "Creativity"],
            "subtitle": "A 2025 Calendar Inspired by the Record Player",
            "collaborators": ["Sarah Jeffers", "Zeke Thoreson"],
            "description": [
                "Our 2025 calendar is inspired by the idea of a record player. Each month is represented by a side of a record, with the main typographic focus in the center. The main typographic focus was designed based on the qualities of the respective month. For instance, June, because of its warm, sunny weather, takes on a beach theme. Further, each record is designed with a unique typeface.",
                "The records are constructed by using Mod Podge to seal the printed display of the record onto one side of 1/8” red acrylic discs. The record player is constructed using hand-cut, sanded, and stained wood along with 3D-printed dials, year decorative embellishment, and a movable hand. As one spins the record, the movable hand places focus on the days of the month which are located on the record’s outer edges. "
            ],
            "abstract": "Title Track 2025, our typographic calendar emphasizes the continuous motion of time underscored by record players. Each month represents a side of the record where the typographic-focused design centered around qualities of the respective month.",
            "images": ["../img/projects/typeCalendar/april.jpg", "../img/projects/typeCalendar/july.jpg", "../img/projects/typeCalendar/september.jpg", "../img/projects/typeCalendar/october.jpg"],
            "icons": ["../icons/adobeIllustrator.png"],
            "completed": true
        }
    ]
}